GET TOUR COMMENTS
  // try {
  //   // console.log(req.query);

  //   //Build Query

  //   //1) Filtering
  //   // const queryObj = { ...req.query };
  //   // const excludedFields = ['page', 'sort', 'limit', 'fields'];
  //   // excludedFields.forEach(el => delete queryObj[el]);

  //   //2)Advanced Filtering
  //   // let queryString = JSON.stringify(queryObj);
  //   // queryString = queryString.replace(
  //   //   /\b(gt|gte|lt|lte)\b/g,
  //   //   match => `$${match}`
  //   // ); // Never make spaces in reqular exp
  //   // console.log(JSON.parse(queryString));

  //   //{difficulty:'easy', duration:{$gte:5}}
  //   //{difficulty:'easy', duration:{gte:5}}
  //   // let query = Tour.find(JSON.parse(queryString));

  //   // 2) Sorting
  //   // if (req.query.sort) {
  //   //   const sortBy = req.query.sort.split(',').join(' ');
  //   //   // console.log(sortBy);
  //   //   query = query.sort(sortBy);
  //   //   // in mongooes shell sort('price' 'ratingsAverage')
  //   // } else {
  //   //   query = query.sort('-createdAt');
  //   // }

  //   // 3) Limiting Fields
  //   // if (req.query.fields) {
  //   //   const fields = req.query.fields.split(',').join(' ');
  //   //   query = query.select(fields);
  //   // } else {
  //   //   query = query.select('-__v');
  //   //   //Getting all the data but excluding __v field
  //   // }

  //   // 4) Pagination
  //   // //page=2&limit=10
  //   // const page = req.query.page * 1 || 1; //Convert string to number || will help to assign default value
  //   // const limit = req.query.limit * 1 || 100;
  //   // const skip = (page - 1) * limit;
  //   // // 1-10 = page 1, 11-20 = page 2, 21-30 = page 3
  //   // query = query.skip(skip).limit(limit);
  //   // if (req.query.page) {
  //   //   const numberTours = await Tour.countDocuments();
  //   //   if (skip >= numberTours) {
  //   //     throw new Error('This page does not exist');
  //   //   }
  //   // }

  //   // //Execute Query
  //   // const features = new APIFeatures(Tour.find(), req.query)
  //   //   .filter()
  //   //   .sorting()
  //   //   .limitFields()
  //   //   .pagination();
  //   // //chaining is possible becoz we return this in all functions
  //   // const tours = await features.query;

  //   // // const tours = await Tour.find()
  //   // //   .where('duration')
  //   // //   .equals(5)
  //   // //   .where('difficulty')
  //   // //   .equals('easy');

  //   // //Send Response
  //   // res.status(200).json({
  //   //   status: 'success',
  //   //   requestAt: `Requested at ${req.requesTime}`,
  //   //   result: tours.length,
  //   //   data: { tours }
  //   // });
  // } catch (e) {
  //   res.status(400).json({
  //     status: 'failed',
  //     message: ` Invalid Data : ${e}`
  //   });
  // }
  --------------------------------------------------------------------------------------

  CREATE TOUR
  // try {
  //   // const newTour = await Tour.create(req.body);
  //   // res.status(201).json({
  //   //   status: 'success',
  //   //   data: {
  //   //     tour: newTour
  //   //   }
  //   // });
  // } catch (e) {
  //   res.status(400).json({
  //     status: 'failed',
  //     message: ` Invalid Data : ${e}`
  //   });
  // }

  // console.log(req.body);
  // const newId = tours[tours.length - 1].id + 1;
  // const newTour = Object.assign({ id: newId }, req.body);
  // tours.push(newTour);

  // fs.writeFile(
  //   `${__dirname}/../dev-data/data/tours-simple.json`,
  //   JSON.stringify(tours),
  //   err => {
  //     if (err) res.send('Error');
  //     res.status(201).json({
  //       status: 'success',
  //       data: {
  //         tour: newTour
  //       }
  //     });
  //   }
  // );
  -------------------------------------------------------------------------------------
FILE HANDLING TOURCONTROLLER COMMENTS
// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`)
// );

// exports.checkId = (req, res, next, val) => {
//   console.log(`Tour id = ${val}`);
//   const id = req.params.id * 1;
//   // if (val > tours.length) {
//   //   return res.status(404).json({
//   //     status: 'failed',
//   //     message: 'Invalid Id'
//   //   });
//   // }
//   next();
// };

// exports.checkBody = (req, res, next) => {
//   console.log(req.body.name);
//   if (!req.body.name || !req.body.price) {
//     return res
//       .status(400)
//       .json({ status: 'failed', message: 'Missing name or price' });
//   }
//   next();
// };
----------------------------------------------------------------------------------------
